        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Author: Dat Pham
        -:    3:	CS 362
        -:    4:	Spring 2018
        -:    5:
        -:    6:*/
        -:    7:#include <stdio.h>
        -:    8:#include <string.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <assert.h>
        -:   11:#include <time.h>
        -:   12:#include <math.h>
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include "rngs.h"
        -:   17:
        -:   18:
        -:   19:// fail counter variables
        -:   20:
        -:   21:int failCardEffect = 0;
        -:   22:int failDiscardCard = 0;
        -:   23:int failDrawCard = 0;
        -:   24:int failDeckHandCount = 0;
        -:   25:int failNumberBuy = 0;
        -:   26:int failDeckHandCount2 = 0;
        -:   27:
        -:   28:
    10000:   29:void checkCard(struct gameState *state,int player) {
        -:   30:
        -:   31:    struct gameState tempState;
        -:   32:	int drawCard1,drawCard2,drawCard3,drawCard4;
        -:   33:	int result;
    10000:   34:	int i=0;
        -:   35:    // save state to tempState
    10000:   36:    memcpy(&tempState,state,sizeof(struct gameState));
        -:   37:
        -:   38:    // check cardEffect
    10000:   39:    cardEffect(council_room,0,0,0,state,0,0);
        -:   40:	
        -:   41:
        -:   42:	 //discardCard
    10000:   43:	result = discardCard(0,player,&tempState,0);
    10000:   44:	if(result)
    #####:   45:		failDiscardCard++;
        -:   46:
        -:   47:    // call draw card 4 times
    10000:   48:    drawCard1 = drawCard(player,&tempState);
    10000:   49:    drawCard2 = drawCard(player,&tempState);
    10000:   50:    drawCard3 = drawCard(player,&tempState);
    10000:   51:    drawCard4 = drawCard(player,&tempState);
        -:   52:
        -:   53:	// check drawcard failed
    10000:   54:	if(tempState.deckCount[player] != 0){
     9979:   55:		if (drawCard1 == -1) {
    #####:   56:			failDrawCard++;
        -:   57:		}
     9979:   58:		if (drawCard2 == -1) {
    #####:   59:			failDrawCard++;
        -:   60:		}
     9979:   61:		if (drawCard3 == -1) {
    #####:   62:			failDrawCard++;
        -:   63:		}
     9979:   64:		if (drawCard4 == -1) {
    #####:   65:			failDrawCard++;
        -:   66:		}
        -:   67:	}
        -:   68:
        -:   69:	//check numBuys
    10000:   70:    tempState.numBuys++;
    10000:   71:	if (tempState.numBuys != state->numBuys) {
        8:   72:        failNumberBuy++;
        -:   73:    }
        -:   74:
        -:   75:    // check hand and deck have amount don't same
    10001:   76:    if(!(state->handCount[player]==tempState.handCount[player]
        1:   77:		&&state->deckCount[player] == tempState.deckCount[player]))
     9999:   78:			failDeckHandCount++;
        -:   79:
        -:   80:
        -:   81:    // check another player with hand and deck counts don't match
    39905:   82:    for (i = 0; i < tempState.numPlayers; i++) {
    29905:   83:        if (i != player) {
    19905:   84:            if (!(state->handCount[i] == tempState.handCount[i] &&
    #####:   85:                  state->deckCount[i] == tempState.deckCount[i])) {
    19905:   86:                      failDeckHandCount2++;
        -:   87:            }
        -:   88:        }
        -:   89:    }
        -:   90:
        -:   91:	// check drawCard with another people
    39905:   92:    for (i = 0; i < tempState.numPlayers; i++) {
    29905:   93:        if (i != player) {
    19905:   94:            result = drawCard(i,&tempState);
        -:   95:
    19905:   96:            if (result == -1 && tempState.deckCount[i] != 0)
    #####:   97:                failDrawCard++;
        -:   98:        }
        -:   99:    }
        -:  100:
    10000:  101:}
        -:  102:
        -:  103:
        1:  104:int main () {
        -:  105:
        1:  106:	int loop = 10000;
        -:  107:    int i, n, player;
        1:  108:	int total = 0;
        1:  109:	int countDeck = 0;
        1:  110:	int countHand = 0;
        1:  111:	int countDiscard = 0;
        -:  112:    struct gameState state;
        1:  113:	int numberOfPlayers[] = {2,3,4};
        1:  114:    srand(time(NULL));
        -:  115:
        1:  116:	printf("\n----------- RANDOM TEST ------------");
        1:  117:    printf("\n Testing function RefactorCouncilRoomCard()");
        1:  118:    printf("\n------------------------------------");
        -:  119:
        -:  120:
        -:  121:    // random the game state
    10001:  122:    for (n = 0; n < loop; n++) {
263010000:  123:        for (i = 0; i < sizeof(struct gameState); i++)
263000000:  124:            ((char*)&state)[i] = floor(Random() * 256);
        -:  125:
        -:  126:        // random select values
    10000:  127:        state.numPlayers = numberOfPlayers[rand() % 3];
    10000:  128:        state.numBuys = 1;
    10000:  129:        state.playedCardCount = floor(Random() * (MAX_DECK-1));
    10000:  130:        player = state.numPlayers - 2;
    10000:  131:        state.whoseTurn = player;
        -:  132:
    10000:  133:		countDeck 	 = floor(Random() * MAX_DECK);
    10000:  134:        countHand 	 = floor(Random() * MAX_HAND);
    10000:  135:        countDiscard = floor(Random() * MAX_DECK);
    39905:  136:        for (i = 0; i < state.numPlayers; i++) {
    29905:  137:            state.deckCount[i] 	  = countDeck;
    29905:  138:            state.handCount[i]    = countHand;
    29905:  139:            state.discardCount[i] = countDiscard;
        -:  140:        }
        -:  141:        // call the check function
    10000:  142:        checkCard(&state,player);
        -:  143:    }
        -:  144:
        1:  145:    total = failCardEffect + failDrawCard + failDiscardCard + failDeckHandCount + failNumberBuy + failDeckHandCount2;
        -:  146:
        1:  147:	printf("\n\n\n----- RESULT RANDOM TEST---------\n");
        1:  148:	printf("\nTotal FAILED: %d",total);
        1:  149:	printf("\nThe amount failed failed drawCard(): %d",failDrawCard);
        1:  150:	printf("\nThe amount failed failed discardCard() failed: %d",failDiscardCard);
        1:  151:	printf("\nCount numBuy don't match: %d",failNumberBuy);
        1:  152:	printf("\nCount hand and desk don't match: %d",failDeckHandCount);
        1:  153:	printf("\nCount hand and desk don't match from another player: %d\n",failDeckHandCount2);
        1:  154:    return 0;
        -:  155:}

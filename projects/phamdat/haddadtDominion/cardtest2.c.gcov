        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Author: Dat Pham
        -:    3:	Class: CS362
        -:    4:	Term: Spring 2018
        -:    5:*/
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:
        -:   13:
        8:   14:int checkResult(int x, int y){
        -:   15:
        8:   16:	if(x == y){
        -:   17:
        6:   18:		printf("PASSED\n");
        6:   19:		return 0;
        -:   20:	}else{
        2:   21:		printf("FAILED\n");
        2:   22:		return 1;
        -:   23:	}
        -:   24:}
        -:   25:
        1:   26:int main(){
        1:   27:	int failTotal = 0;
        1:   28:	int resultFromCheck = 0;
        1:   29:	int seed = 1000;
        1:   30:	int bonus = 0;
        1:   31:	int numplayer = 2;
        1:   32:	int player1=0;
        1:   33:	int player2=1;
        -:   34:
        1:   35:	int handpos =0;
        1:   36:	int firstChoice=0;
        1:   37:	int secondChoice =0;
        1:   38:	int thirdChoice =0;
        -:   39:
        -:   40:
        -:   41:
        1:   42:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   43:			sea_hag, tribute, smithy, council_room};
        -:   44:
        -:   45:	struct gameState gState;
        -:   46:	struct gameState tempState;
        1:   47:	printf("\n------------------------------------TESTING smithy of Card------------------------------\n");
        -:   48:
        1:   49:	memset(&gState,23,sizeof(struct gameState));
        1:   50:    memset(&tempState,23,sizeof(struct gameState));
        -:   51:
        -:   52:	// create a state
        1:   53:    initializeGame(numplayer, k, seed, &gState);
        -:   54:
        -:   55:
        -:   56:	//save state
        1:   57:	memcpy(&tempState, &gState, sizeof(struct gameState));
        1:   58:	cardEffect(smithy, firstChoice, secondChoice, thirdChoice, &gState, handpos, &bonus);
        -:   59:
        1:   60:	printf("\nTest player gains 3 cards: ");
        1:   61:	resultFromCheck = checkResult(gState.handCount[player1],tempState.handCount[player1]+2);
        1:   62:	if(resultFromCheck == 1)
        1:   63:		failTotal++;
        -:   64:
        1:   65:	printf("\nTest player gains 3 cards from pile: ");
        1:   66:	resultFromCheck = checkResult(gState.deckCount[player1],tempState.deckCount[player1]-3);
        1:   67:	if(resultFromCheck == 1)
    #####:   68:		failTotal++;
        -:   69:
        1:   70:	printf("\n---Check data of another player wasn't affected---\n");
        1:   71:	printf("Deck card don't change: ");
        1:   72:	resultFromCheck = checkResult(gState.deckCount[player2],tempState.deckCount[player2]);
        1:   73:	if(resultFromCheck == 1)
    #####:   74:		failTotal++;
        -:   75:
        1:   76:	printf("Hand card don't change: ");
        1:   77:	resultFromCheck = checkResult(gState.handCount[player2],tempState.handCount[player2]);
        1:   78:	if(resultFromCheck == 1)
    #####:   79:		failTotal++;
        -:   80:
        1:   81:	printf("\n---Check another type cards don't change---\n");
        1:   82:	printf("The number curse cards don't change: ");
        1:   83:	resultFromCheck = checkResult(gState.supplyCount[curse],tempState.supplyCount[curse]);
        1:   84:	if(resultFromCheck == 1)
    #####:   85:		failTotal++;
        1:   86:	printf("The number estate victory cards don't change: ");
        1:   87:	resultFromCheck = checkResult(gState.supplyCount[estate],tempState.supplyCount[estate]);
        1:   88:	if(resultFromCheck == 1)
        1:   89:		failTotal++;
        1:   90:	printf("The number duchy victory cards don't change: ");
        1:   91:	resultFromCheck = checkResult(gState.supplyCount[duchy],tempState.supplyCount[duchy]);
        1:   92:	if(resultFromCheck == 1)
    #####:   93:		failTotal++;
        1:   94:	printf("The number province victory cards don't change: ");
        1:   95:	resultFromCheck = checkResult(gState.supplyCount[province],tempState.supplyCount[province]);
        1:   96:	if(resultFromCheck == 1)
    #####:   97:		failTotal++;
        -:   98:
        1:   99:	if(failTotal!=0){
        1:  100:		printf("\nTEST FAILED, the number fails: %d\n",failTotal);
        -:  101:	}else{
    #####:  102:		printf("\nTEST SUCCESSFULLY\n");
        -:  103:	}
        -:  104:
        1:  105:	printf("\n---------------------------------End Testing smithy of Card----------------------------------\n");
        -:  106:
        1:  107:	return 0;
        -:  108:}

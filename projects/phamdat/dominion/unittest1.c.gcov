        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Author: Dat Pham
        -:    3:	Class: CS362
        -:    4:	Term: Spring 2018
        -:    5:	Description: write unittest for function buyCard Validates the card being played can be played then calls cardEffect to play the card
        -:    6:*/
        -:    7:
        -:    8:#include <string.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include "rngs.h"
        -:   14:
        3:   15:int checkResult(int x, int y){
        -:   16:	
        3:   17:	if(x == y){
        -:   18:		
        3:   19:		printf("PASSED\n");
        3:   20:		return 0;
        -:   21:	}else{
    #####:   22:		printf("FAILED\n");
    #####:   23:		return 1;
        -:   24:	}
        -:   25:}
        -:   26:
        1:   27:int main(){
        -:   28:	
        1:   29:	int seed = 1000;
        -:   30:	struct gameState gState;
        1:   31:	int resultFromGameOver = 0;
        1:   32:	int resultFromCheck = 0;
        1:   33:	int failTotal = 0;
        1:   34:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   35:               remodel, smithy, village, baron, great_hall};
        -:   36:			   
        1:   37:	printf("\n------------------------------------TESTING isGameOver()------------------------------\n");
        1:   38:	printf("\n Description: Validates the card being played can be played then calls cardEffect to play the card");
        1:   39:	printf("\n---------------------------------------------------------------------------------------------------\n");
        1:   40:	memset(&gState,23,sizeof(struct gameState));
        1:   41:	initializeGame(2, k, seed, &gState);
        -:   42:	
        1:   43:	printf("\nTesting if stack of Province cards is empty, the game ends\n");
        1:   44:	gState.supplyCount[province] = 0;
        1:   45:	resultFromGameOver = isGameOver(&gState);
        1:   46:	resultFromCheck = checkResult(resultFromGameOver,1);
        1:   47:	if(resultFromCheck == 1)
    #####:   48:			failTotal++;
        -:   49:		
        1:   50:	printf("\nTesting if three supply pile are at 0, the game ends\n");
        1:   51:	gState.supplyCount[province] = 1;
        1:   52:	gState.supplyCount[0] = 0;
        1:   53:	gState.supplyCount[1] = 0;
        1:   54:	gState.supplyCount[2] = 0;
        1:   55:	resultFromGameOver = isGameOver(&gState);
        1:   56:	resultFromCheck = checkResult(resultFromGameOver,1);
        1:   57:	if(resultFromCheck == 1)
    #####:   58:			failTotal++;
        -:   59:	
        1:   60:	printf("\nTesting if three supply pile are not 0\n");
        1:   61:	gState.supplyCount[province] = 1;
        1:   62:	gState.supplyCount[0] = 1;
        1:   63:	gState.supplyCount[1] = 1;
        1:   64:	gState.supplyCount[2] = 1;
        1:   65:	resultFromGameOver = isGameOver(&gState);
        1:   66:	resultFromCheck = checkResult(resultFromGameOver,0);
        1:   67:	if(resultFromCheck == 1)
    #####:   68:			failTotal++;
        -:   69:	
        1:   70:	return 0;
        -:   71:}
